// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   createdAt DateTime @default(now())
//   authorId  Int
// }

enum CardType {
  CREDITO
  DEBITO
  AMBOS
}

enum DocumentType {
  RG
  CNH
}

model User {
  id          Int          @id @default(autoincrement())
  email       String
  password    String
  createdAt   DateTime     @default(now())
  credentials Credential[]

  Note     Note[]
  Card     Card[]
  Wifi     Wifi[]
  Document Document[]
  @@map("users")
  Session Session[]
}

model Session {
  id     Int    @id @default(autoincrement())
  token  String
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())

  @@map("sessions")
}

model Credential {
  id        Int      @id @default(autoincrement())
  title     String
  username  String
  url       String
  password  String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@map("credentials")
}

model Note {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())

  @@map("notes")
}

model Card {
  id             Int      @id @default(autoincrement())
  title          String
  number         String
  name           String
  securityCode   String
  password       String
  expirationDate String
  virtual        Boolean
  type           CardType
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime @default(now())

  @@map("cards")
}

model Wifi {
  id        Int      @id @default(autoincrement())
  title     String
  name      String
  password  String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@map("wifis")
}

model Document {
  id             Int          @id @default(autoincrement())
  type           DocumentType
  name           String
  issueDate      DateTime
  expirationDate DateTime
  number         String
  agency         String
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime     @default(now())

  @@map("documents")
}
